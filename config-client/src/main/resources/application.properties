#配置中心配置
spring.application.name=config-client
server.port=8881

spring.cloud.config.label=master
spring.cloud.config.profile=dev

#如果要实现高可用分布式配置中心就要去掉配置服务端地址，设置spring.cloud.config.discovery.enabled来发现服务,如果不需要实现高可用可打开
#spring.cloud.config.uri= http://localhost:8888/

#配置说明
#spring.cloud.config.label 指明远程仓库的分支
#spring.cloud.config.profile
#dev开发环境配置文件
#test测试环境
#pro正式环境
#spring.cloud.config.uri= http://localhost:8888/ 指明配置服务中心的网址。

#实现高可用分布式配置中心，将其注册到注册中心
#如果不要高可用，则上面的配置就足以
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
#开启Config服务发现支持
spring.cloud.config.discovery.enabled=true
spring.cloud.config.discovery.serviceId=config-server
#配置说明
#spring.cloud.config.discovery.enabled 开启Config服务发现支持,是从配置中心读取文件。
#spring.cloud.config.discovery.serviceId 配置中心的servieId，即服务名。

#这时发现，在读取配置文件不再写ip地址，而是服务名，这时如果配置服务部署多份，通过负载均衡，从而高可用。

#使用Spring Cloud Bus
#当git文件更改的时候，通过pc端用post 向端口为8882的config-client发送请求/bus/refresh／；此时8882端口会发送一个消息，由消息总线向其他服务传递，从而使整个微服务集群都达到更新配置文件。
#在配置文件application.properties中加上RabbitMq的配置，包括RabbitMq的地址、端口，用户名、密码。并需要加上spring.cloud.bus的三个配置
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
#spring.cloud.bus
spring.cloud.bus.enabled=true
# 开启消息跟踪
spring.cloud.bus.trace.enabled=true
#配置actuator 访问地址 http://localhost:8881/actuator/bus-refresh
management.endpoints.web.exposure.include=bus-refresh




