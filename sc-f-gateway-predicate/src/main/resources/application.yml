server:
  port: 8081
spring:
  profiles:
    active: header_route

#请求和路由匹配，决定了一个请求走哪个路由

#下面是各种Predicate配置详解

#After Route Predicate Factory
---
spring:
  cloud:
    gateway:
      routes:
      - id: after_route
        uri: http://httpbin.org:80/get
        predicates:
        - After=2017-01-20T17:42:47.789-07:00[America/Denver]
  profiles: after_route

#在上面的配置文件中，配置了服务的端口为8081，配置spring.profiles.active:after_route指定了程序的spring的启动文件为after_route文件。
#在application.yml再建一个配置文件，语法是三个横线，在此配置文件中通过spring.profiles来配置文件名，
#和spring.profiles.active一致，然后配置spring cloud gateway 相关的配置，id标签配置的是router的id，
#每个router都需要一个唯一的id，uri配置的是将请求路由到哪里，本案例全部路由到http://httpbin.org:80/get。

#predicates： After=2017-01-20T17:42:47.789-07:00[America/Denver]
#会被解析成PredicateDefinition对象 （name =After ，args= 2017-01-20T17:42:47.789-07:00[America/Denver]）。
#在这里需要注意的是predicates的After这个配置，遵循的契约大于配置的思想，它实际被AfterRoutePredicateFactory这个类所处理，

#这个After就是指定了它的Gateway web handler类为AfterRoutePredicateFactory，同理，其他类型的predicate也遵循这个规则

#Header Route Predicate Factory
#Header Route Predicate Factory需要2个参数，一个是header名，另外一个header值，该值可以是一个正则表达式。
#当此断言匹配了请求的header名和值时，断言通过，进入到router的规则中去。
---
spring:
  cloud:
    gateway:
      routes:
      - id: header_route
        uri: http://httpbin.org:80/get
        predicates:
        - Header=X-Request-Id, \d+
  profiles: header_route
#在上面的配置中，当请求的Header中有X-Request-Id的header名，且header值为数字时，请求会被路由到配置的 uri.

#Cookie Route Predicate Factory

#Cookie Route Predicate Factory需要2个参数，一个时cookie名字，另一个时值，可以为正则表达式。
#它用于匹配请求中，带有该名称的cookie和cookie匹配正则表达式的请求。
---
spring:
  cloud:
    gateway:
      routes:
      - id: cookie_route
        uri: http://httpbin.org:80/get
        predicates:
        - Cookie=name, forezp
  profiles: cookie_route
#在上面的配置中，请求带有cookie名为 name, cookie值为forezp 的请求将都会转发到uri为 http://httpbin.org:80/get的地址上。
#使用curl命令进行请求，在请求中带上 cookie，会返回正确的结果，否则，请求报404错误。

#Host Route Predicate Factory
#Host Route Predicate Factory需要一个参数即hostname，它可以使用. * 等去匹配host。这个参数会匹配请求头中的host的值，
#一致，则请求正确转发。
---
spring:
  cloud:
    gateway:
      routes:
      - id: host_route
        uri: http://httpbin.org:80/get
        predicates:
        - Host=**.fangzhipeng.com
  profiles: host_route
#在上面的配置中，请求头中含有Host为fangzhipeng.com的请求将会被路由转发转发到配置的uri。
#启动工程，执行以下的curl命令，请求会返回正确的请求结果：

#Method Route Predicate Factory
#Method Route Predicate Factory 需要一个参数，即请求的类型。比如GET类型的请求都转发到此路由。在工程的配置文件加上以下的配置：
---
spring:
  cloud:
    gateway:
      routes:
      - id: method_route
        uri: http://httpbin.org:80/get
        predicates:
        - Method=GET
  profiles: method_route
#在上面的配置中，所有的GET类型的请求都会路由转发到配置的uri。使用 curl命令模拟 get类型的请求，会得到正确的返回结果。

#Path Route Predicate Factory
#Path Route Predicate Factory 需要一个参数: 一个spel表达式，应用匹配路径。
---
spring:
  cloud:
    gateway:
      routes:
      - id: path_route
        uri: http://httpbin.org:80/get
        predicates:
        - Path=/foo/{segment}
  profiles: path_route
#在上面的配置中，所有的请求路径满足/foo/{segment}的请求将会匹配并被路由，比如/foo/1 、/foo/bar的请求，将会命中匹配，并成功转发。

#Query Route Predicate Factory
#Query Route Predicate Factory 需要2个参数:一个参数名和一个参数值的正则表达式。在工程的配置文件application.yml做以下的配置：
 ---
 spring:
   cloud:
     gateway:
       routes:
       - id: query_route
         uri: http://httpbin.org:80/get
         predicates:
         - Query=foo, ba.
   profiles: query_route
#在上面的配置文件中，配置了请求中含有参数foo，并且foo的值匹配ba.，则请求命中路由，比如一个请求中含有参数名为foo，值的为bar，能够被正确路由转发。
#Query Route Predicate Factory也可以只填一个参数，填一个参数时，则只匹配参数名，即请求的参数中含有配置的参数名，则命中路由。

#比如以下的配置中，配置了请求参数中含有参数名为foo 的参数将会被请求转发到uri为http://httpbin.org:80/get。
---
spring:
  cloud:
    gateway:
      routes:
      - id: query_route
        uri: http://httpbin.org:80/get
        predicates:
        - Query=foo
  profiles: query_route


# 参考文章 https://www.fangzhipeng.com/springcloud/2018/12/05/sc-f-gateway2.html